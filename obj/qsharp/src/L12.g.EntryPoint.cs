//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

namespace QMC
{
    internal class __QsEntryPoint__MainOp : global::Microsoft.Quantum.EntryPointDriver.IEntryPoint
    {
        public string Name => "QMC.MainOp";
        public string Summary => "";
        public System.Collections.Generic.IEnumerable<System.CommandLine.Option> Options => new System.CommandLine.Option[] { global::Microsoft.Quantum.EntryPointDriver.Options.CreateOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("volatility"), ""), global::Microsoft.Quantum.EntryPointDriver.Options.CreateOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("drift"), ""), global::Microsoft.Quantum.EntryPointDriver.Options.CreateOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("totalTime"), ""), global::Microsoft.Quantum.EntryPointDriver.Options.CreateOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("steps"), "") };
        private static (Double,Double,Int64,Int64) CreateArgument(System.CommandLine.Parsing.ParseResult parseResult) => (parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("volatility")), parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("drift")), parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("totalTime")), parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("steps")));
        public System.Threading.Tasks.Task<int> GenerateAzurePayload(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.GenerateAzurePayloadSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.GenerateAzurePayload(settings, global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "QMC.MainOp", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>(new global::Microsoft.Quantum.Runtime.Argument("volatility", new global::Microsoft.Quantum.Runtime.ArgumentValue.Double(parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("volatility")))), new global::Microsoft.Quantum.Runtime.Argument("drift", new global::Microsoft.Quantum.Runtime.ArgumentValue.Double(parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("drift")))), new global::Microsoft.Quantum.Runtime.Argument("totalTime", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("totalTime")))), new global::Microsoft.Quantum.Runtime.Argument("steps", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("steps")))))) : null);
        public System.Threading.Tasks.Task<int> Submit(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.AzureSettings settings) => global::Microsoft.Quantum.EntryPointDriver.Azure.Submit(settings, new global::Microsoft.Quantum.EntryPointDriver.QSharpSubmission<(Double,Double,Int64,Int64), IQArray<Result>>(global::QMC.MainOp.Info, CreateArgument(parseResult)), global::System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("__qsharp_data_qir_v1__.bc") is { } qirStream ? new global::Microsoft.Quantum.EntryPointDriver.QirSubmission(qirStream, "QMC.MainOp", global::System.Collections.Immutable.ImmutableList.Create<global::Microsoft.Quantum.Runtime.Argument>(new global::Microsoft.Quantum.Runtime.Argument("volatility", new global::Microsoft.Quantum.Runtime.ArgumentValue.Double(parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("volatility")))), new global::Microsoft.Quantum.Runtime.Argument("drift", new global::Microsoft.Quantum.Runtime.ArgumentValue.Double(parseResult.ValueForOption<Double>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("drift")))), new global::Microsoft.Quantum.Runtime.Argument("totalTime", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("totalTime")))), new global::Microsoft.Quantum.Runtime.Argument("steps", new global::Microsoft.Quantum.Runtime.ArgumentValue.Int(parseResult.ValueForOption<Int64>("--" + System.CommandLine.Parsing.StringExtensions.ToKebabCase("steps")))))) : null);
        public System.Threading.Tasks.Task<int> Simulate(System.CommandLine.Parsing.ParseResult parseResult, global::Microsoft.Quantum.EntryPointDriver.DriverSettings settings, string simulator) => global::Microsoft.Quantum.EntryPointDriver.Simulation<global::QMC.MainOp, (Double,Double,Int64,Int64), IQArray<Result>>.Simulate(this, CreateArgument(parseResult), settings, simulator);
    }
}